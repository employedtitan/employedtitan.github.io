#---------------------------------------------------
#CompOrg program 3
#
#Sven Wiberg
#
#Purpose:The purpose of this program is to display a user selected amount of numbers from the fibonacci 
#sequence that have been calculated recursivly 
#
#input:The input for this program is a user selected integer
#
#Output:The output for this program is a user selected amount of the fibbonaci sequence 
#
#----------------------------------------------------


	.data

prompt:		.asciiz "Please enter the amount of fibonacci numbers you want displayed: "
sum:		.asciiz "The sum of "
sumtwo:		.asciiz	"fibonacci numbers is: "
endl:		.asciiz	"\n"
storagespace:	.word  32
#----------------------------------------------------

	.text
	.globlmain

main:



 	#print statement to give prompt
	
	li	$v0, 4
	la	$a0, prompt
		syscall

	
	#collecting the int
	li	$v0, 5
		syscall
	
	#printing an end line to help formatting
	la	$a0, endl
	li	$v0, 4
		syscall
	
	#moving the user input into to a saved register for puposes of organization
	move	$s1, $v0

	#moving the user input into another saved register for use at the end of the program, will be used to store the sum
	move	$s7, $v0
	
	#creating a register to act as the 
	
	#a branch on equal if the user enters a zero to skip the recursion
	beq	$s1, $zero, zerosumgame

	#loading in the beginning arguments for the sequence mainly s2 = 1, and s3 = 1
	li	$s2, 1
	
	li 	$s3, 1


	#storing a 1 in $t7 to subtract from the user input in the recursive call
	li	$t7, 1

	#call to the recursive procedure for fibonacci numbers and sum
	jal	fibonacci


zerosumgame:
	
	#print statement for the sum
	li	$v0, 4
	la	$a0, sum
		syscall

	#print statement for the amount of digits that the user wants
	

	move	$a0, $s1
	li	$v0, 1
		syscall
	
	#print statement for the end of printing the sum
	
	li	$v0, 1
	la	$a0, sumtwo
		syscall
	
	#print statement to print out the actual numerical sum
	move	$a0, $s7
	li	$v0, 1
		syscall
	
	#end of the program
	li	$v0, 10
		syscall
	



#------------------------------------------------------

	.data

	.text

fibonacci:


	#loading the storagespace varible to increment the storage location
	lw	$t0, storagespace
	li	$t1, 32
	
	
	
	#allocating storage for the frame
	subu	$sp, $sp, $t0
	
	#incrementing and storing the location
	add	$t0, $t1, $t0
	
	sw	$t0, storagespace


	#saving the return address
	sw	$ra, 20($sp)

	#saving the frame pointer
	sw	$fp, 16($sp)

	#reseting the frame pointer
	addu	$fp, $sp, 28
	
	#saving the arguments
	sw	$s2, -4($fp)
	sw	$s3, 28($sp)

	
	#moving the second of the two arguments to a temporary register so it can be moved into the place of the first register later
	move	$t3, $s3 

	#doing the addition operation and storing it in the second register
	add	$s3, $s3, $s2
	
	#moving the stored register into the first register 
	move	$s2, $t3
	
	#subtracting from  the user input if it reaches zero skip the recursive command
	sub	$s7, $s7, $t7
	
	#a branch on equals to skip the recursion if the 
	beq	$s7, $zero, wemustheadBACKTOTHEFUTURE


	#the recursive command
	jal	fibonacci



wemustheadBACKTOTHEFUTURE:
	
	#moving the number in the second register to be printed
	move	$a0, $s3
	
	#printing the number
	li	$v0, 1
		syscall

	#printing an end line after the number
	la	$a0, endl
	li	$v0, 4
		syscall
	
	#adding the number to the sum, which will be stored in the $s7 register which is now zero
	add	$s7, $s7, $s3

	#deincrementing the storage location
	sub	$t0, $t1, $t0
	

	#restoring the previous fibonacci number
	lw	$s3, 28($sp)
	#storing the deincremented storage location
	sw	$t0, storagespace

	#reloading the registers to return
	lw	$ra, 20($sp)
	lw	$fp, 16($sp)
	addu	$sp, $sp, $t0
	j	$ra